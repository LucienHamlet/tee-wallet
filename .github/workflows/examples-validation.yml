name: Examples Validation

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  validate-examples:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio
        pip install aiohttp || echo "aiohttp not available, examples will use fallback"

    - name: Run core functionality validation
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
        import sys, asyncio
        sys.path.insert(0, 'src')
        from tee_wallet import TEEWallet, SigningPolicy, TransactionRequest
        from spoon_integration import create_secure_agent, SpoonOSIntegration
        
        async def validate():
            print('=== TEE Wallet Core Functionality Validation ===')
            
            # Test 1: Basic wallet creation
            print('1. Testing wallet creation...')
            wallet = TEEWallet('validation_wallet')
            print(f'   ✅ Wallet created: {wallet.get_address()}')
            
            # Test 2: Policy enforcement
            print('2. Testing policy enforcement...')
            policy = SigningPolicy(max_transaction_value=500.0)
            wallet_with_policy = TEEWallet('policy_wallet', policy)
            
            small_tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 100.0)
            result = await wallet_with_policy.secure_sign(small_tx)
            assert result['success'], 'Small transaction should succeed'
            print('   ✅ Small transaction approved')
            
            large_tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 1000.0)
            result = await wallet_with_policy.secure_sign(large_tx)
            assert not result['success'], 'Large transaction should be blocked'
            print('   ✅ Large transaction correctly blocked by policy')
            
            # Test 3: SpoonOS integration
            print('3. Testing SpoonOS integration...')
            integration = SpoonOSIntegration()
            parse_result = integration._parse_with_regex('Send 0.5 ETH to 0x742d35Cc6634C0532925a3b844Bc9e7595f1234')
            assert parse_result['success'] and parse_result['amount'] == 0.5
            print('   ✅ Transaction parsing works correctly')
            
            # Test 4: Secure agent creation
            print('4. Testing secure agent creation...')
            agent = create_secure_agent('test_agent', {'max_transaction_value': 1000.0, 'daily_limit': 5000.0})
            print(f'   ✅ Secure agent created: {agent.wallet.get_address()}')
            
            print('=== All Core Functionality Tests Passed! ===')
        
        asyncio.run(validate())
        "

    - name: Validate SpoonOS submodule structure
      run: |
        echo "Validating SpoonOS submodule..."
        test -d spoonos || (echo "SpoonOS submodule missing" && exit 1)
        test -f spoonos/README.md || (echo "SpoonOS README missing" && exit 1)
        test -d spoonos/spoon_ai || (echo "SpoonOS core missing" && exit 1)
        echo "✅ SpoonOS submodule structure validated"

    - name: Performance test
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
        import sys, asyncio, time
        sys.path.insert(0, 'src')
        from tee_wallet import TEEWallet, TransactionRequest
        
        async def performance_test():
            print('Running performance test...')
            start_time = time.time()
            
            wallets = []
            for i in range(10):
                wallet = TEEWallet(f'perf_test_{i}')
                wallets.append(wallet)
            
            tasks = []
            for i, wallet in enumerate(wallets):
                tx = TransactionRequest(f'0x742d35Cc6634C0532925a3b844Bc9e759{i:04d}', 50.0 + i)
                tasks.append(wallet.secure_sign(tx))
            
            results = await asyncio.gather(*tasks)
            end_time = time.time()
            
            successful = sum(1 for r in results if r['success'])
            print(f'✅ Processed {len(results)} transactions in {end_time - start_time:.2f}s')
            print(f'✅ Success rate: {successful}/{len(results)}')
        
        asyncio.run(performance_test())
        "