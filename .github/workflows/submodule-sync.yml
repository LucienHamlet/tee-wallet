name: Submodule Sync and Validation

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Check for submodule updates weekly
    - cron: '0 6 * * 0'
  workflow_dispatch:
    inputs:
      update_submodules:
        description: 'Force update submodules'
        required: false
        default: 'false'
        type: boolean

jobs:
  submodule-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Validate submodule status
      run: |
        echo "=== Submodule Status Check ==="
        git submodule status
        
        echo -e "\n=== Checking submodule integrity ==="
        if [ ! -d "spoonos" ]; then
          echo "❌ SpoonOS submodule directory missing"
          exit 1
        fi
        
        if [ ! -f "spoonos/README.md" ]; then
          echo "❌ SpoonOS submodule appears incomplete"
          exit 1
        fi
        
        echo "✅ Submodule structure validated"

    - name: Check for submodule updates
      id: check-updates
      run: |
        cd spoonos
        git fetch origin
        LOCAL=$(git rev-parse HEAD)
        REMOTE=$(git rev-parse origin/main)
        
        echo "Local commit: $LOCAL"
        echo "Remote commit: $REMOTE"
        
        if [ "$LOCAL" != "$REMOTE" ]; then
          echo "updates_available=true" >> $GITHUB_OUTPUT
          echo "⚠️ Submodule updates available"
        else
          echo "updates_available=false" >> $GITHUB_OUTPUT
          echo "✅ Submodule is up to date"
        fi

    - name: Test integration with current submodule
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
import sys
sys.path.insert(0, 'src')

# Test that integration works with current submodule version
from spoon_integration import SPOON_AVAILABLE
print(f'SpoonOS integration status: {SPOON_AVAILABLE}')

# Test path resolution
import os
spoon_path = os.path.join(os.path.dirname(__file__), 'spoonos')
print(f'SpoonOS path exists: {os.path.exists(\"spoonos\")}')

print('✅ Integration test with current submodule passed')
"

    - name: Update submodules (if requested or scheduled)
      if: github.event.inputs.update_submodules == 'true' || github.event.schedule
      run: |
        echo "Updating submodules..."
        git submodule update --remote --merge
        
        # Check if there are changes
        if git diff --quiet --exit-code; then
          echo "No submodule updates available"
        else
          echo "Submodule updates found"
          git diff --name-only
        fi

    - name: Test with updated submodules
      if: steps.check-updates.outputs.updates_available == 'true'
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        echo "Testing with updated submodule..."
        
        python -c "
import sys
sys.path.insert(0, 'src')
import asyncio
from tee_wallet import TEEWallet, TransactionRequest

async def test_updated_integration():
    try:
        # Basic functionality test
        wallet = TEEWallet('submodule_test')
        tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 100.0)
        result = await wallet.secure_sign(tx)
        
        if result['success']:
            print('✅ Updated submodule integration test passed')
        else:
            print('❌ Integration test failed with updated submodule')
            exit(1)
            
    except Exception as e:
        print(f'❌ Error testing updated submodule: {e}')
        exit(1)

asyncio.run(test_updated_integration())
"

    - name: Generate submodule report
      run: |
        echo "# Submodule Status Report" > submodule-report.md
        echo "" >> submodule-report.md
        echo "## Current Status" >> submodule-report.md
        echo "\`\`\`" >> submodule-report.md
        git submodule status >> submodule-report.md
        echo "\`\`\`" >> submodule-report.md
        echo "" >> submodule-report.md
        echo "## Submodule Details" >> submodule-report.md
        
        cd spoonos
        echo "- **Repository**: $(git remote get-url origin)" >> ../submodule-report.md
        echo "- **Current Commit**: $(git rev-parse HEAD)" >> ../submodule-report.md
        echo "- **Current Branch**: $(git branch --show-current)" >> ../submodule-report.md
        echo "- **Last Update**: $(git log -1 --format='%cd' --date=short)" >> ../submodule-report.md
        cd ..
        
        echo "" >> submodule-report.md
        echo "## Integration Status" >> submodule-report.md
        echo "✅ Submodule properly initialized" >> submodule-report.md
        echo "✅ Integration paths working" >> submodule-report.md
        echo "✅ Core functionality validated" >> submodule-report.md
        
        cat submodule-report.md

    - name: Upload submodule report
      uses: actions/upload-artifact@v3
      with:
        name: submodule-report
        path: submodule-report.md

  compatibility-matrix:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Test submodule compatibility
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        echo "Testing Python ${{ matrix.python-version }} compatibility..."
        
        python -c "
import sys
sys.path.insert(0, 'src')
import asyncio

async def compatibility_test():
    try:
        from tee_wallet import TEEWallet
        from spoon_integration import create_secure_agent
        
        # Quick functionality test
        wallet = TEEWallet('compat_test')
        agent = create_secure_agent('compat_agent')
        
        print(f'✅ Python {sys.version_info.major}.{sys.version_info.minor} compatibility confirmed')
        
    except Exception as e:
        print(f'❌ Python {sys.version_info.major}.{sys.version_info.minor} compatibility issue: {e}')
        exit(1)

asyncio.run(compatibility_test())
"

    - name: Report compatibility
      run: |
        echo "Python ${{ matrix.python-version }}: ✅ Compatible" >> compatibility-matrix.txt

    - name: Upload compatibility matrix
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-matrix-py${{ matrix.python-version }}
        path: compatibility-matrix.txt