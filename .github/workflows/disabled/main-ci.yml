name: Main CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cryptography
        pip install flake8 || true

    - name: Debug environment
      run: |
        echo "=== Environment Debug ==="
        python --version
        pip --version
        echo "Working directory: $(pwd)"
        echo "Files in root: $(ls -la)"
        echo "Files in src: $(ls -la src/ 2>/dev/null || echo 'src/ not found')"

    - name: Lint with flake8
      run: |
        if command -v flake8 &> /dev/null; then
          # Check for syntax errors and undefined names
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || true
          # Check for style issues (non-blocking)
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
        else
          echo "Flake8 not available, skipping lint"
        fi

    - name: Test imports
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
        import sys
        sys.path.insert(0, 'src')
        try:
            import tee_wallet
            print('✓ tee_wallet imported successfully')
        except Exception as e:
            print(f'✗ tee_wallet import failed: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        
        try:
            import spoon_integration
            print('✓ spoon_integration imported successfully')
        except Exception as e:
            print(f'✗ spoon_integration import failed: {e}')
            import traceback
            traceback.print_exc()
            exit(1)
        "

    - name: Run core functionality tests
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
        import asyncio
        import sys
        sys.path.insert(0, 'src')
        
        async def run_tests():
            from tee_wallet import TEEWallet, SigningPolicy, TransactionRequest
            
            print('=== Core Functionality Tests ===')
            
            # Test 1: Basic wallet creation
            print('1. Testing wallet creation...')
            wallet = TEEWallet('github_test')
            print(f'   ✓ Wallet created: {wallet.get_address()}')
            
            # Test 2: Basic transaction
            print('2. Testing transaction signing...')
            tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 100.0)
            result = await wallet.secure_sign(tx)
            if result['success']:
                print('   ✓ Transaction signed successfully')
            else:
                print(f'   ✗ Transaction failed: {result.get(\"error\")}')
                return False
            
            # Test 3: Policy enforcement
            print('3. Testing policy enforcement...')
            policy = SigningPolicy(max_transaction_value=50.0)
            policy_wallet = TEEWallet('policy_test', policy)
            
            large_tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 100.0)
            result = await policy_wallet.secure_sign(large_tx)
            if not result['success']:
                print('   ✓ Large transaction correctly blocked')
            else:
                print('   ✗ Large transaction should have been blocked')
                return False
            
            print('✓ All core functionality tests passed')
            return True
        
        import sys
        success = asyncio.run(run_tests())
        if not success:
            sys.exit(1)
        "

    - name: Validate project structure
      run: |
        echo "=== Project Structure Validation ==="
        files_to_check=(
          "src/tee_wallet.py"
          "src/spoon_integration.py"
          "src/enhanced_tee_wallet.py"
          "src/hsm_support.py"
        )
        
        all_good=true
        for file in "${files_to_check[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            all_good=false
          fi
        done
        
        if [ -d "spoonos" ]; then
          echo "✓ spoonos submodule exists"
        else
          echo "✗ spoonos submodule missing"
          all_good=false
        fi
        
        if [ "$all_good" = true ]; then
          echo "✓ All required files present"
        else
          echo "✗ Some required files missing"
          exit 1
        fi