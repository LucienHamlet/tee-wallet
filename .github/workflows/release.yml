name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine pytest pytest-asyncio

    - name: Run full test suite
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/src"
        python -c "
        import sys, asyncio
        sys.path.insert(0, 'src')
        from tee_wallet import TEEWallet, SigningPolicy, TransactionRequest
        from spoon_integration import create_secure_agent, SpoonOSIntegration
        
        async def full_test_suite():
            print('=== Release Test Suite ===')
            
            # Test 1: Core functionality
            print('1. Testing core wallet functionality...')
            wallet = TEEWallet('release_test')
            tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 100.0)
            result = await wallet.secure_sign(tx)
            assert result['success'], 'Core functionality test failed'
            print('   ✅ Core functionality passed')
            
            # Test 2: Policy enforcement
            print('2. Testing policy enforcement...')
            policy = SigningPolicy(max_transaction_value=50.0)
            policy_wallet = TEEWallet('policy_test', policy)
            
            large_tx = TransactionRequest('0x742d35Cc6634C0532925a3b844Bc9e7595f1234', 100.0)
            result = await policy_wallet.secure_sign(large_tx)
            assert not result['success'], 'Policy enforcement test failed'
            print('   ✅ Policy enforcement passed')
            
            # Test 3: SpoonOS integration
            print('3. Testing SpoonOS integration...')
            integration = SpoonOSIntegration()
            parse_result = integration._parse_with_regex('Send 1 ETH to 0x742d35Cc6634C0532925a3b844Bc9e7595f1234')
            assert parse_result['success'], 'Integration test failed'
            print('   ✅ SpoonOS integration passed')
            
            # Test 4: Agent creation
            print('4. Testing agent creation...')
            agent = create_secure_agent('release_agent')
            assert agent.wallet.get_address().startswith('0x'), 'Agent creation test failed'
            print('   ✅ Agent creation passed')
            
            print('=== All Release Tests Passed! ===')
        
        asyncio.run(full_test_suite())
        "

    - name: Build package
      run: python -m build

    - name: Run security validation
      run: |
        pip install bandit safety
        bandit -r src/ -ll || true
        pip freeze > release-requirements.txt
        safety check -r release-requirements.txt || true